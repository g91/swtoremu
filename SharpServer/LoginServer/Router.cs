using System;
using System.Collections.Generic;
using System.IO;
using System.Security.Cryptography;
using System.Threading;
using CSInteropKeys;
using System.Text;

namespace NexusToRServer.LoginServer
{
    class Router
    {
        public int ClientID { get; set; }
        private TCPClient Client;
        private List<Packet> PacketQueue;
        private Thread PacketPool;

        public Router(TCPClient inClient)
        {
            this.ClientID = inClient.ClientID;
            this.Client = inClient;
            this.PacketQueue = new List<Packet>();
            SendHello();

            PacketPool = new Thread(PacketPoolStub);
            PacketPool.Start();
        }

        public void Dispose()
        {
            PacketPool.Abort();
            PacketQueue.Clear();
        }

        private void PacketPoolStub()
        {
            while (true)
            {
                if (PacketQueue.Count > 0)
                {
                    PacketQueue[0].Construct(Client.Deflate);
                    byte[] pBuffer = PacketQueue[0].Finalize(Client.Encryptor);
                    Client.Stream.Write(pBuffer, 0, pBuffer.Length);
                    PacketQueue.RemoveAt(0);
                    Thread.Sleep(100);
                }
                Thread.Sleep(10);
            }
        }

        private void SendHello()
        {
            // TODO: Properly Implement this
            MemoryStream hStream = new MemoryStream();
            EndianBinaryWriter hWriter = new EndianBinaryWriter(MiscUtil.Conversion.EndianBitConverter.Little, hStream);
            hWriter.Write((byte)0x03); // Module
            hWriter.Write((UInt32)0x00000016); // Length
            hWriter.Write((byte)0x15); // Checksum
            hWriter.Write((UInt32)0x00000011); // Packet Type
            hWriter.Write((UInt32)0x00000008); // Component
            hWriter.Write((UInt64)0x00); // Connection ID
            
            byte[] pBuff = hStream.ToArray();

            hWriter.Close();
            hStream.Close();

            Client.Stream.Write(pBuff, 0, pBuff.Length);
        }

        public void ReceivedPacket(byte[] pBuffer, int pLength)
        {
            if (!Client.GotKeys)
            {
                ProcessHandshake(pBuffer, pLength);
            }
            else
            {
                PacketStream pStream = new PacketStream(pBuffer, pLength, Client.Decryptor, Client.Inflate);
                foreach (Packet pPacket in pStream.Packets)
                    HandlePacket(pPacket);
            }
        }

        private void HandlePacket(Packet inPacket)
        {
            Packet outPacket = null;

            if (inPacket.IsValid)
            {
                Log.Write(LogLevel.Debug, "Received Packet [{0}]", inPacket.PacketID.ToString());
                switch (inPacket.PacketID)
                {
                    case CPacketType.RequestID:
                        {
                            string ShardID = inPacket.Reader.ReadString(true);
                            UInt64 Unk01 = inPacket.Reader.ReadUInt64();
                            Log.Write(LogLevel.Client, "User '{0}' wants to connect to shard '{1}'", Client.Username, ShardID);

                            // TODO: Checks (?)

                            outPacket = new Packet(CPacketType.ReplyID, 0xFFFFFFFF, 0x00);

                            outPacket.Writer.Write((UInt16)0x04);
                            outPacket.Writer.Write(ShardID, true);
                            outPacket.Writer.Write("afc1bb5a", true);
                            outPacket.Writer.Write("loginserver", true);
                            outPacket.Writer.Write(Unk01);

                            break;
                        }
                    case CPacketType.RequestIntroduceConnection:
                        {
                            inPacket.Reader.ReadUInt16(); // 0x00
                            inPacket.Reader.ReadUInt16(); // 0x04;
                            inPacket.Reader.ReadString(true); // OmegaServerProxyObjectName
                            inPacket.Reader.ReadString(true); // Client
                            inPacket.Reader.ReadString(true); // b7a6bba3:8ab55405:d7b5d3e1:5bc541f9
                            //inPacket.Reader.ReadString(true); // OmegaServerProxyObjectName

                            outPacket = new Packet(CPacketType.ReplyIntroduceConnection, 0x00000004, 0x00);
                            outPacket.Writer.Write("127.0.0.1:20060", true); // ShardServer address
                            string connHash = GenerateConnectionHash();
                            TransUserTable.ByUN(Client.Username).ConnectionHash = connHash;
                            outPacket.Writer.Write(connHash, true); // 40-char validation hash (?)

                            break;
                        }
                    case CPacketType.Ping:
                        {
                            outPacket = new Packet((CPacketType)inPacket.Unk01, 0x00000000, 0x02);
                            outPacket.Writer.Write("", true);

                            break;
                        }
                    case CPacketType.RequestClose:
                        {
                            // Close the client connection
                            Client.Stream.Close();
                            break;
                        }
                    default:
                        Log.Write(LogLevel.Warning, "Unknown Packet");
                        break;
                }
            }
            else
            {
                Log.Write(LogLevel.Warning, "Received Invalid Packet");
            }

            if (outPacket != null)
                PacketQueue.Add(outPacket);
        }

        string GenerateConnectionHash()
        {
            Random random = new Random();
            String randomString = "";
            int randNumber;

            for (int i = 0; i < 40; i++)
            {
                randNumber = random.Next(65, 90);
                randomString = randomString + (char)randNumber;
            }

            return randomString;
        }



        void ProcessHandshake(byte[] pBuffer, int pLength)
        {
            Log.Write(LogLevel.Info, "\n{0}", pBuffer.ToHEX(pLength));

            PacketStream pStream = new PacketStream(pBuffer, pLength, Client.Decryptor, Client.Inflate, true);

            Packet iPacket = pStream.Packets[0];

            byte[] privateKey = new byte[] { 0x30, 0x82, 0x04, 0xBC, 0x02, 0x01, 0x00, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x01, 0x05, 0x00, 0x04, 0x82, 0x04, 0xA6, 0x30, 0x82, 0x04, 0xA2, 0x02, 0x01, 0x00, 0x02, 0x82, 0x01, 0x01, 0x00, 0xB2, 0x3B, 0x14, 0xD0, 0x60, 0xC3, 0x0D, 0xDB, 0x90, 0x53, 0x29, 0x94, 0xFD, 0x63, 0xF3, 0x57, 0x0D, 0x02, 0x55, 0x41, 0xCD, 0x08, 0x6A, 0x6F, 0xFF, 0x0D, 0x44, 0xE5, 0x19, 0xA8, 0x04, 0xE6, 0x3C, 0x31, 0x28, 0x1C, 0x71, 0x74, 0x40, 0xAD, 0x7B, 0xAB, 0x8F, 0xE3, 0x3E, 0x06, 0xF7, 0xBD, 0x10, 0xF5, 0x3D, 0x8E, 0x0F, 0xA9, 0x00, 0xB8, 0xB6, 0xA0, 0x8F, 0xE4, 0xCB, 0xE4, 0x13, 0x3D, 0x84, 0xBC, 0xE9, 0x19, 0x91, 0x6E, 0xCE, 0x58, 0x84, 0x50, 0xDC, 0x79, 0x15, 0xD3, 0x16, 0xEE, 0x6B, 0x36, 0xEC, 0xDF, 0x81, 0x1E, 0x8F, 0x03, 0x9B, 0x20, 0xB1, 0x8E, 0x56, 0x4E, 0x51, 0x66, 0xED, 0xC7, 0xFC, 0x7E, 0x03, 0xC4, 0xCC, 0xD2, 0xCD, 0x31, 0x1C, 0xAC, 0x1C, 0x17, 0x3E, 0xB3, 0xF6, 0x5F, 0xB8, 0xAA, 0x05, 0x5A, 0xAE, 0xB5, 0xB1, 0x50, 0x3E, 0xE8, 0x90, 0x69, 0x1F, 0xBA, 0x84, 0x0E, 0xDB, 0x62, 0x58, 0x64, 0x4A, 0x4B, 0x64, 0xE7, 0xB6, 0x5A, 0x2D, 0xA3, 0x6C, 0x8E, 0x6C, 0x26, 0x02, 0xF6, 0x08, 0xF6, 0x7A, 0x03, 0x20, 0xC0, 0x68, 0x63, 0xB1, 0x19, 0xEF, 0x18, 0x9A, 0x60, 0xB3, 0xDD, 0x89, 0x21, 0xF6, 0x9A, 0x01, 0x1E, 0x3D, 0x51, 0x8F, 0x03, 0x0E, 0x5D, 0xD8, 0x96, 0x22, 0x06, 0x7C, 0x47, 0x21, 0x66, 0xF1, 0x29, 0xBC, 0x28, 0x3E, 0x8D, 0xBE, 0xEE, 0x4B, 0x6B, 0x7D, 0x57, 0xE1, 0x35, 0x18, 0x6A, 0x87, 0xB5, 0x1F, 0xCC, 0x17, 0xAE, 0xC7, 0x46, 0x73, 0x79, 0x6E, 0xF8, 0xA6, 0xD9, 0xE5, 0x98, 0x52, 0xE9, 0xE6, 0x1D, 0x8A, 0x6D, 0x0E, 0xEE, 0xBC, 0x6B, 0x93, 0xF5, 0xF8, 0x7F, 0x7D, 0x30, 0x69, 0xB6, 0x21, 0x50, 0x3D, 0xA1, 0x27, 0x72, 0x99, 0xC8, 0x22, 0x00, 0x51, 0xB5, 0x95, 0xB9, 0x41, 0x20, 0x7E, 0xFA, 0x93, 0x55, 0x3A, 0x31, 0x02, 0x01, 0x11, 0x02, 0x82, 0x01, 0x00, 0x09, 0x2C, 0x73, 0xE5, 0x14, 0x0A, 0x0A, 0x20, 0x01, 0xC8, 0x0B, 0x8D, 0x50, 0xCE, 0x8E, 0x68, 0x3E, 0xC9, 0x88, 0x27, 0x26, 0xC9, 0xD8, 0x4D, 0x4B, 0x3E, 0xCC, 0xF5, 0x34, 0x24, 0xE2, 0x22, 0x70, 0x46, 0x4B, 0x79, 0xEF, 0x40, 0x56, 0x27, 0x0C, 0x03, 0x2E, 0xEF, 0x76, 0x04, 0x1F, 0x93, 0x24, 0xA3, 0x35, 0xFD, 0xE6, 0x73, 0xFE, 0x27, 0x9F, 0xFC, 0xF8, 0x58, 0xF3, 0xE7, 0xF9, 0x75, 0xFD, 0x6B, 0x9B, 0x0E, 0x7E, 0x12, 0xE1, 0x35, 0x7F, 0x47, 0xED, 0x3A, 0xF0, 0x2E, 0xA1, 0x2E, 0x27, 0x66, 0x97, 0x7C, 0x71, 0xF0, 0xA1, 0xB6, 0xC6, 0x1A, 0x27, 0x41, 0xAD, 0xDA, 0x9E, 0x8A, 0xF1, 0xE2, 0xC3, 0x95, 0x8B, 0x7C, 0xF3, 0xF4, 0x43, 0x08, 0x2C, 0xC5, 0x18, 0x08, 0xB9, 0xD0, 0xCA, 0xCC, 0x74, 0xCC, 0x84, 0x0A, 0x50, 0x85, 0x96, 0x4D, 0x8A, 0xC4, 0x70, 0xD8, 0x3B, 0xFC, 0x56, 0x4C, 0xE6, 0x52, 0xFF, 0x7C, 0x44, 0x2C, 0xAF, 0xCD, 0x01, 0xA2, 0xC1, 0xFB, 0x9B, 0x3A, 0xAF, 0x03, 0xE0, 0x24, 0xB7, 0xEB, 0xE2, 0x55, 0xC0, 0xA7, 0xD6, 0x9A, 0xA4, 0xB3, 0x2C, 0x56, 0x8E, 0x5B, 0x19, 0x7F, 0x4F, 0x2E, 0x77, 0xD1, 0x26, 0x2F, 0x02, 0x87, 0x56, 0xDC, 0xF3, 0x29, 0x13, 0x8D, 0x8C, 0xFA, 0xF0, 0x54, 0x26, 0x7C, 0x89, 0x0B, 0xB3, 0xBC, 0x4A, 0xCE, 0xF7, 0x33, 0x02, 0x56, 0xEB, 0x88, 0x90, 0x94, 0x44, 0x61, 0x53, 0xE0, 0x75, 0x07, 0x6A, 0x70, 0xF5, 0x1A, 0x69, 0x69, 0x71, 0x9A, 0xAA, 0x15, 0xBD, 0x49, 0x38, 0xA1, 0xE5, 0x0A, 0x70, 0x6A, 0x1B, 0x9C, 0xCE, 0x04, 0x39, 0x7C, 0x68, 0xCF, 0xF8, 0x17, 0xEE, 0xA3, 0x9C, 0x40, 0x4A, 0xE1, 0x5A, 0xEE, 0x71, 0x64, 0x5E, 0x64, 0x23, 0xCE, 0xAC, 0x70, 0xFC, 0x39, 0x19, 0x9C, 0x28, 0xBC, 0x3F, 0xA9, 0x02, 0x81, 0x81, 0x00, 0xF0, 0x85, 0x37, 0x1B, 0xC0, 0x64, 0xA9, 0x02, 0xDC, 0x48, 0x21, 0x6E, 0xFC, 0x04, 0x0F, 0x80, 0xC4, 0x3C, 0x7D, 0x5D, 0x58, 0x7B, 0x98, 0x35, 0xBF, 0x3C, 0x3F, 0xC5, 0xA9, 0x11, 0x38, 0xC5, 0x90, 0x75, 0xB7, 0x7F, 0x2A, 0x30, 0x53, 0x9D, 0xAB, 0x65, 0x3E, 0x21, 0x45, 0x04, 0x06, 0xAF, 0xCB, 0x57, 0x2E, 0x34, 0xB6, 0x5B, 0xE3, 0xCB, 0xAF, 0x58, 0x65, 0x9B, 0x7C, 0x86, 0xFC, 0x17, 0x87, 0x50, 0x82, 0x5D, 0x51, 0x44, 0xA1, 0x04, 0x03, 0x93, 0x61, 0x81, 0xFF, 0x23, 0x91, 0xA1, 0x64, 0x06, 0x63, 0xD0, 0x5D, 0x45, 0x1E, 0x9D, 0x0E, 0x4C, 0x2B, 0xA1, 0x14, 0xE1, 0xE2, 0x09, 0x62, 0xD7, 0x2D, 0x27, 0x73, 0x2E, 0xC3, 0xF0, 0x86, 0x9E, 0xE6, 0xC7, 0x63, 0x70, 0x70, 0xA9, 0x41, 0x60, 0xCD, 0x03, 0xF5, 0xA1, 0x95, 0xF4, 0xB6, 0x46, 0x10, 0xAA, 0x48, 0x07, 0x6B, 0xF9, 0x02, 0x81, 0x81, 0x00, 0xBD, 0xB3, 0x97, 0x1E, 0xA1, 0xFF, 0x07, 0x08, 0xE7, 0xEC, 0x07, 0x6C, 0x78, 0xD0, 0x27, 0x74, 0xF1, 0xE7, 0x5E, 0x3D, 0x04, 0x4A, 0xD9, 0x02, 0x30, 0x35, 0x03, 0xBC, 0xF5, 0xDD, 0x58, 0xE5, 0xF3, 0x01, 0x0C, 0xFE, 0x13, 0x6A, 0xD4, 0x41, 0x6F, 0xDE, 0x84, 0xEA, 0xD6, 0xF1, 0x25, 0xB4, 0x91, 0x5C, 0x40, 0xC6, 0x64, 0x1A, 0x9B, 0x03, 0x24, 0x5B, 0xB2, 0x8B, 0xA6, 0xE4, 0x00, 0x1C, 0x4D, 0x82, 0x3F, 0x78, 0xBB, 0x8B, 0x46, 0xDF, 0x01, 0xF4, 0x4A, 0x4C, 0x4D, 0xAF, 0x77, 0x11, 0xA1, 0xBB, 0x90, 0x8F, 0xF3, 0x5C, 0x20, 0x48, 0x1C, 0xE6, 0xA1, 0xB1, 0xA4, 0x59, 0x14, 0x6C, 0x92, 0x66, 0xE5, 0x5D, 0x6C, 0x63, 0x9C, 0x01, 0x34, 0x63, 0x5E, 0xCC, 0x4F, 0xF1, 0xD0, 0x1E, 0x74, 0x37, 0x06, 0x87, 0x5B, 0x40, 0x0E, 0x0C, 0xD4, 0x3B, 0xEA, 0x76, 0x58, 0x72, 0x1D, 0xF9, 0x02, 0x81, 0x81, 0x00, 0xA9, 0xC7, 0x72, 0x31, 0xB4, 0xFB, 0xC2, 0x98, 0x9B, 0x7E, 0x35, 0xB7, 0xC0, 0xF3, 0xCE, 0xB5, 0x3F, 0x39, 0xC1, 0xE7, 0x89, 0xC0, 0xA7, 0xAD, 0x77, 0xEE, 0x4B, 0x22, 0x1C, 0xFD, 0x19, 0x03, 0xED, 0x80, 0x45, 0x4A, 0xB4, 0x5E, 0x59, 0x24, 0x00, 0x83, 0xB3, 0x62, 0xC7, 0x4E, 0x22, 0xD6, 0x71, 0x6A, 0xB7, 0x34, 0x44, 0x7D, 0x19, 0x44, 0x7B, 0xC5, 0xED, 0x5E, 0xB2, 0x41, 0x2A, 0x6A, 0xF6, 0x1A, 0xB6, 0x5F, 0xFD, 0x21, 0x62, 0x99, 0x6B, 0xEF, 0x90, 0x1F, 0x86, 0xEB, 0xEE, 0x53, 0xCE, 0x22, 0xA0, 0xCF, 0x50, 0xE5, 0x7F, 0x05, 0x73, 0x81, 0x0F, 0xBC, 0xFF, 0xAE, 0x81, 0x70, 0x09, 0x88, 0xD4, 0x94, 0x51, 0x4E, 0x2F, 0xF5, 0x13, 0xBB, 0x75, 0xB9, 0xEB, 0xD6, 0xE6, 0x1D, 0x1F, 0x17, 0x27, 0x4E, 0x16, 0xCC, 0x69, 0xD9, 0xEA, 0x13, 0x57, 0x0E, 0xC9, 0x6E, 0xA6, 0x91, 0x02, 0x81, 0x80, 0x2C, 0xA2, 0xBA, 0x25, 0x53, 0x4B, 0x10, 0xB6, 0xCD, 0x28, 0x7A, 0x37, 0xA3, 0xF4, 0xBD, 0xFD, 0x66, 0x18, 0x52, 0x68, 0xB5, 0xB7, 0x42, 0x1E, 0xA1, 0xEE, 0x5B, 0x3B, 0x85, 0x25, 0x05, 0xDB, 0xC0, 0xB4, 0xF3, 0xFF, 0x8C, 0x19, 0x22, 0xE2, 0x38, 0x70, 0x97, 0xBE, 0xC9, 0x29, 0xAE, 0x84, 0xD6, 0xE8, 0x87, 0xB6, 0x35, 0xAB, 0xE8, 0x3C, 0xF9, 0x7E, 0xFC, 0xD5, 0x90, 0xAE, 0x1E, 0x24, 0xC6, 0xF1, 0x78, 0x58, 0xA4, 0x99, 0x3D, 0xDA, 0x1E, 0x93, 0xD5, 0x3F, 0x21, 0x56, 0x76, 0x5E, 0x80, 0x68, 0x5E, 0x3F, 0xFD, 0x06, 0x9E, 0x2F, 0x15, 0xDB, 0xE9, 0xCF, 0x71, 0xF6, 0xD7, 0xA1, 0x13, 0x63, 0x81, 0x43, 0x28, 0x8F, 0xE8, 0x78, 0xC1, 0x08, 0x52, 0x8A, 0x6D, 0x29, 0xD6, 0x9D, 0xC0, 0xFD, 0xE3, 0x6B, 0x24, 0x87, 0x8A, 0xD5, 0xD7, 0x95, 0xA0, 0x94, 0x51, 0x0B, 0xCA, 0xD1, 0x02, 0x81, 0x81, 0x00, 0xD5, 0x44, 0xDE, 0xAB, 0x3A, 0x9F, 0x9D, 0x5C, 0x7E, 0xB4, 0x6F, 0x7C, 0x62, 0xA1, 0x5A, 0x87, 0xB6, 0x30, 0x27, 0xE7, 0xEE, 0x58, 0x86, 0x1D, 0x46, 0x1C, 0x8C, 0x0D, 0x02, 0x8F, 0x1C, 0x33, 0x4C, 0x18, 0xB7, 0xC1, 0xE0, 0x0A, 0xD4, 0x61, 0x8A, 0x0C, 0x00, 0xCE, 0xCC, 0x75, 0x01, 0x91, 0xCE, 0x56, 0xB3, 0xD4, 0xDA, 0x33, 0x50, 0xB1, 0x7D, 0x1B, 0x35, 0x3E, 0xC2, 0x9E, 0x63, 0x80, 0xFD, 0xE8, 0x49, 0x65, 0xEF, 0xD4, 0x01, 0xDA, 0xD0, 0x8F, 0x02, 0x27, 0xC5, 0x24, 0xA2, 0xCD, 0x0D, 0xD5, 0xD8, 0xC5, 0xE0, 0xD0, 0xFD, 0x3F, 0x6A, 0xCB, 0x86, 0x35, 0x5D, 0x56, 0xC5, 0x90, 0xA9, 0xF6, 0x4D, 0xD5, 0xED, 0x93, 0x86, 0x85, 0xD9, 0x29, 0x2F, 0xC8, 0x3C, 0x99, 0xD7, 0xD8, 0xE0, 0xEF, 0x58, 0x89, 0x98, 0x42, 0x65, 0xA6, 0x34, 0x9D, 0x9E, 0x0C, 0xA5, 0x78, 0xE7, 0x80 };

            RSACryptoServiceProvider RSAProv = new RSACryptoServiceProvider();

            AsnKeyParser keyParser = new AsnKeyParser(privateKey);
            RSAParameters privParams = keyParser.ParseRSAPrivateKey();
            RSAProv.ImportParameters(privParams);

            //byte[] Blocks = new byte[256];

            byte[] Block = new byte[256];
            Buffer.BlockCopy(iPacket.RSAData, 0, Block, 0, 256);
            byte[] decData = RSAProv.Decrypt(Block, false);
            //Buffer.BlockCopy(decData, 0, Blocks, 0, decData.Length);

            /*byte[] Block2 = new byte[128];
            Buffer.BlockCopy(iPacket.RSAData, 128, Block2, 0, 128);
            byte[] decDatakey = RSAProv.Decrypt(Block2, false);
            Buffer.BlockCopy(decDatakey, 0, Blocks, decData.Length, decDatakey.Length);*/

            Log.Write(LogLevel.Info, "\n{0}", decData.ToHEX(decData.Length));


            MemoryStream Stream = new MemoryStream(decData);
            EndianBinaryReader Reader = new EndianBinaryReader(MiscUtil.Conversion.EndianBitConverter.Little, Stream);

            Client.Username = Reader.ReadString(true);
            Client.Password = Reader.ReadString(true);

            Client.SalsaKey01 = Reader.ReadBytes(32);
            Client.SalsaKey02 = Reader.ReadBytes(32);
            Client.SalsaIV01 = Reader.ReadBytes(8);
            Client.SalsaIV02 = Reader.ReadBytes(8);
            Client.Init();

            TransUser user = new TransUser(Client.Username);
            TransUserTable.Add(user);

            // TODO: Username / Password check

            Client.GotKeys = true;

            Log.Write(LogLevel.Info, "User '{0}' logging in with token '0x{1}'", Client.Username, BitConverter.ToString(Encoding.ASCII.GetBytes(Client.Password)).Replace("-", ""));
        }

    }
}
